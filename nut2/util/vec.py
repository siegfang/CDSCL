
import numpy as np
from .. import bolt
import copy
from debug import timeit
import pdb

class VecConverter:
    """
    """

    def __init__(self, s_ivoc, t_ivoc, s_word2vec, t_word2vec):

        self.seg = max(s_ivoc.keys())
        self.s_ivoc = s_ivoc
        self.t_ivoc = t_ivoc
        self.s_model = s_word2vec
        self.t_model = t_word2vec

    def vec(self, wi):
        if wi <= self.seg:
            w = self.s_ivoc[wi]
            w = w.decode('utf-8')
            if w in self.s_model:
                return self.s_model[w]
            else:
                return np.zeros(self.s_model.layer1_size, dtype=np.int32)
        else:
            w = self.t_ivoc[wi]
            w = w.decode('utf-8')
            if w in self.t_model:
                return self.t_model[w]
            else:
                return np.zeros(self.t_model.layer1_size, dtype=np.int32)
    @timeit
    def instance2vec(self, dataset):
        """Convert the frequency vector of document to vector
        generated by word2vec
        """
        dim = self.t_model.layer1_size
        instances = []
        for x in dataset.instances:
            vec = np.zeros(dim)
            for wi, freq in x:
                vec += self.vec(wi) * freq
            # vec = [[idx, x] for idx, x in enumerate(vec)]
            instances.append(vec)

        # instances = bolt.io.fromlist(instances, np.object)
        # classes = np.unique(dataset.labels)
        self.ds = instances
        # return self.ds, classes

    def mask(self, bowset, task_mask):
        copy_instances = copy.deepcopy(self.ds)
        for ins_idx, instance in enumerate(bowset.instances):
            s_idx = np.where(instance['f0'] == task_mask[0])
            t_idx = np.where(instance['f0'] == task_mask[1])
            idx = np.concatenate((s_idx, t_idx), axis=1)
            # pdb.set_trace()
            if idx[0].shape != (0,):
                wi, freq = instance[idx][0][0]
                copy_instances[ins_idx] -= self.vec(wi) * freq
            vec = [(iidx, x) for iidx, x in enumerate(copy_instances[ins_idx])]
            copy_instances[ins_idx] = np.array(vec, dtype=bolt.sparsedtype)

        dim = self.t_model.layer1_size
        copy_instances = bolt.io.fromlist(copy_instances, np.object)
        return bolt.MemoryDataset(dim, copy_instances, bowset.labels)

    def dataset2vec(self, dataset):
        dim = self.t_model.layer1_size
        instances = []
        for x in dataset.instances:
            vec = np.zeros(dim)
            for wi, freq in x:
                vec += self.vec(wi) * freq
            vec = [(idx, x) for idx, x in enumerate(vec)]
            vec = np.array(vec, dtype=bolt.sparsedtype)
            instances.append(vec)

        instances = bolt.io.fromlist(instances, np.object)
        return bolt.MemoryDataset(dim, instances, dataset.labels)


